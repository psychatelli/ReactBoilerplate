{"ast":null,"code":"import _classCallCheck from \"/Users/Adam/Genepull Template/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Adam/Genepull Template/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Adam/Genepull Template/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Adam/Genepull Template/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Adam/Genepull Template/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Adam/Genepull Template/src/components/common/editableInput.js\";\nimport React, { Component } from 'react';\n\nvar EditableInput =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EditableInput, _Component);\n\n  function EditableInput(props) {\n    var _this;\n\n    _classCallCheck(this, EditableInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditableInput).call(this, props));\n\n    _this.success = function () {\n      _this.setState({\n        submitting: false\n      });\n    };\n\n    _this.failure = function () {\n      _this.setState({\n        submitting: false,\n        error: true\n      });\n    };\n\n    _this.handleCancel = function () {\n      _this.setState({\n        draftText: _this.state.text\n      });\n\n      _this.toggleEditing();\n    };\n\n    _this.handleClickOutside = function (e) {\n      if (_this.wrapperRef && !_this.wrapperRef.contains(e.target)) {\n        _this.toggleEditing();\n      }\n    };\n\n    _this.toggleEditing = function () {\n      // so we can close on outside click\n      if (_this.state.editing) {\n        document.removeEventListener('mousedown', _this.handleClickOutside);\n      } else {\n        document.addEventListener('mousedown', _this.handleClickOutside);\n      }\n\n      _this.setState({\n        editing: !_this.state.editing\n      });\n    };\n\n    _this.handleChange = function (e) {\n      _this.setState({\n        draftText: e.target.value\n      });\n    };\n\n    _this.triggerSubmit = function () {\n      _this.setState({\n        text: _this.state.draftText,\n        submitting: true\n      }); // submit\n      // this.props.submitCallback(this.state.draftText, this.success, this.failure);\n\n    };\n\n    _this.handleKeyDown = function (e) {\n      var enter_key = 13;\n      var escape_key = 27;\n\n      if (e.keyCode == enter_key) {\n        _this.toggleEditing();\n\n        _this.triggerSubmit();\n      } else if (e.keyCode == escape_key) {\n        _this.toggleEditing();\n      }\n    };\n\n    _this.state = {\n      editing: false,\n      submitting: false,\n      error: false\n    };\n    _this.success = _this.success;\n    _this.failure = _this.failure;\n    return _this;\n  }\n\n  _createClass(EditableInput, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var controlLinks;\n      var editing;\n      var textOrInput;\n      var error;\n\n      if (this.state.error) {\n        error = React.createElement(\"span\", {\n          className: \"error\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, \"error!\");\n      }\n\n      if (this.state.editing) {\n        textOrInput = React.createElement(\"textarea\", {\n          classname: \"myTextArea\",\n          onChange: this.handleChange,\n          onKeyDown: this.handleKeyDown,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, this.props.description);\n        controlLinks = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          className: \"edit-link blue-link\",\n          onClick: this.handleCancel,\n          href: \"#\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, \"CANCEL\"));\n        editing = 'editing';\n      } else {\n        textOrInput = React.createElement(\"span\", {\n          onClick: this.toggleEditing,\n          className: \"text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, this.props.description);\n        controlLinks = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          className: \"edit-link blue-link\",\n          onClick: this.toggleEditing,\n          href: \"#\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, \"EDIT\"));\n        editing = '';\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"\".concat(this.props.className, \" \").concat(editing, \" editable-field\"),\n        ref: function ref(node) {\n          _this2.wrapperRef = node;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, textOrInput, error, controlLinks));\n    }\n  }]);\n\n  return EditableInput;\n}(Component);\n\nexport { EditableInput as default };","map":{"version":3,"sources":["/Users/Adam/Genepull Template/src/components/common/editableInput.js"],"names":["React","Component","EditableInput","props","success","setState","submitting","failure","error","handleCancel","draftText","state","text","toggleEditing","handleClickOutside","e","wrapperRef","contains","target","editing","document","removeEventListener","addEventListener","handleChange","value","triggerSubmit","handleKeyDown","enter_key","escape_key","keyCode","controlLinks","textOrInput","description","className","node"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nexport default class EditableInput extends Component {\n    constructor(props) {\n        super(props);\n    \n        this.state = {\n          editing: false,\n          submitting: false,\n          \n          error: false,\n        }\n    \n        this.success = this.success;\n        this.failure = this.failure;\n      }\n    \n        success = () => {\n            this.setState({submitting: false});\n        }\n    \n    \n        failure = () => {\n            this.setState({\n                submitting: false,\n                error: true\n            });\n        }\n    \n        handleCancel = () => {\n            this.setState({draftText: this.state.text});\n            this.toggleEditing();\n        }\n        \n        handleClickOutside = (e) => {\n          if (this.wrapperRef && !this.wrapperRef.contains(e.target)) {\n              this.toggleEditing();\n          }\n      }\n\n\n        toggleEditing = () => {\n            // so we can close on outside click\n            if (this.state.editing) {\n                document.removeEventListener('mousedown', this.handleClickOutside);\n            } else {\n                document.addEventListener('mousedown', this.handleClickOutside);\n            }\n        \n            this.setState({editing: !this.state.editing});\n        }\n    \n        handleChange = (e) => {\n            this.setState({draftText: e.target.value});\n    \n        }\n    \n      // actually submit the request etc.\n        triggerSubmit = () => {\n            this.setState({\n                text: this.state.draftText,\n                submitting: true,\n            });\n    \n            // submit\n            // this.props.submitCallback(this.state.draftText, this.success, this.failure);\n        }\n      \n    \n      // check for enter or cancel\n        handleKeyDown = (e) => {\n            const enter_key = 13;\n            const escape_key = 27;\n    \n            if (e.keyCode == enter_key) {\n            this.toggleEditing();\n            this.triggerSubmit();\n            } else if (e.keyCode == escape_key) {\n            this.toggleEditing();\n            }\n        }\n    \n\n  render() {\n    let controlLinks;\n    let editing;\n    let textOrInput;\n    let error;\n\n    if (this.state.error) {\n        error = <span className=\"error\">error!</span>\n      }\n\n\n\n      if (this.state.editing) {\n        textOrInput = <textarea classname=\"myTextArea\" \n                      onChange={this.handleChange}\n                      onKeyDown={this.handleKeyDown}>\n                      {this.props.description}\n                      </textarea>\n                       \n  \n        controlLinks = (\n          <div>\n            <a className=\"edit-link blue-link\" onClick={this.handleCancel} href=\"#\">CANCEL</a>\n          </div>\n        )\n  \n        editing = 'editing';\n      } else {\n        textOrInput = <span onClick={this.toggleEditing} className=\"text\">{this.props.description}</span>\n        controlLinks = <div><a className=\"edit-link blue-link\" onClick={this.toggleEditing} href=\"#\">EDIT</a></div>\n        editing = '';\n      }\n\n\n\n    return (\n      <div>\n        \n        <div\n        className={`${this.props.className} ${editing} editable-field`}\n        ref={(node) => { this.wrapperRef = node; }}\n      >\n        {textOrInput}\n        {error}\n        {controlLinks}\n      </div>\n\n\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}